{% extends 'base.html.twig' %}

{% block title %}Nouvelle Demande d'Achat{% endblock %}

{% block stylesheets %}
<style>
    .article-row {
        transition: all 0.2s;
        border-left: 3px solid transparent;
    }
    .article-row:hover {
        background-color: #f8f9fa;
        border-left: 3px solid #3b82f6;
    }
    .delete-row {
        cursor: pointer;
        transition: all 0.2s;
    }
    .delete-row:hover {
        color: #dc3545;
    }
    .fournisseur-input, .quantite-input, .prix-input {
        border: none;
        border-bottom: 1px solid #dee2e6;
        border-radius: 0;
        padding: 0.25rem;
        transition: all 0.2s;
    }
    .fournisseur-input:focus, .quantite-input:focus, .prix-input:focus {
        border-bottom: 2px solid #3b82f6;
        box-shadow: none;
    }
    .article-select {
        font-weight: 500;
    }
    .tva-badge {
        cursor: pointer;
        transition: all 0.2s;
    }
    .tva-badge.active {
        background-color: #3b82f6 !important;
        color: white;
    }
    
    /* Nouveaux styles pour le formulaire d'article */
    .form-check-input:checked {
        background-color: #3b82f6;
        border-color: #3b82f6;
    }
    
    .modal-content {
        border-radius: 0.5rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    
    .form-label {
        font-weight: 500;
    }
    
    #form-errors {
        border-left: 4px solid #dc3545;
    }
    
    .toast {
        opacity: 1;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }
    
    .toast .toast-header {
        border-bottom: 0;
    }
    
    /* Animation pour les nouveaux articles */
    @keyframes highlightNew {
        0% { background-color: rgba(25, 135, 84, 0.2); }
        100% { background-color: transparent; }
    }
    
    .article-row.new-article {
        animation: highlightNew 2s ease-out;
    }
    
    .badge.bg-success {
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { opacity: 0.7; }
        50% { opacity: 1; }
        100% { opacity: 0.7; }
    }
</style>
{% endblock %}

{% block body %}
<div class="container-fluid px-4 py-3">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Créer une Nouvelle Demande d'Achat</h1>
        <a href="{{ path('app_demand_achat') }}" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left me-2"></i>Retour à la liste
        </a>
    </div>
    
    <div class="row">
        <div class="col-md-12">
            
            
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Articles à Commander</h5>
                    <button type="button" class="btn btn-sm btn-primary" id="addArticleBtn">
                        <i class="bi bi-plus-circle me-1"></i>Ajouter un Article
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table" id="articlesTable">
                            <thead>
                                <tr>
                                    <th style="width: 30%">Article</th>
                                    <th style="width: 20%">Fournisseur</th>
                                    <th style="width: 15%">Quantité</th>
                                    <th style="width: 15%">Prix Unitaire</th>
                                    <th style="width: 15%">Total</th>
                                    <th style="width: 5%"></th>
                                </tr>
                            </thead>
                            <tbody id="articlesBody">
                                <!-- Les lignes d'articles seront ajoutées ici dynamiquement -->
                            </tbody>
                        </table>
                    </div>
                    
                    <div class="alert alert-info mt-3" id="emptyArticlesMessage">
                        <i class="bi bi-info-circle me-2"></i>
                        Aucun article n'a été ajouté à cette demande. Cliquez sur "Ajouter un Article" pour commencer.
                    </div>
                </div>
            </div>
            
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0">Récapitulatif</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">TVA</label>
                                <div class="d-flex">
                                    <span class="badge bg-light text-dark me-2 p-2 tva-badge" data-tva="0">0%</span>
                                    <span class="badge bg-light text-dark me-2 p-2 tva-badge" data-tva="7">7%</span>
                                    <span class="badge bg-light text-dark me-2 p-2 tva-badge" data-tva="14">14%</span>
                                    <span class="badge bg-light text-dark me-2 p-2 tva-badge active" data-tva="20">20%</span>
                                </div>
                                <input type="hidden" id="tva" name="tva" value="20">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3 text-end">
                                <div class="d-flex justify-content-between mb-2">
                                    <span class="fw-bold">Total HT:</span>
                                    <span id="totalHT">0.00 DH</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span class="fw-bold">TVA (<span id="tvaPercent">20</span>%):</span>
                                    <span id="totalTVA">0.00 DH</span>
                                </div>
                                <div class="d-flex justify-content-between">
                                    <span class="fw-bold">Total TTC:</span>
                                    <span id="totalTTC" class="h5 text-primary mb-0">0.00 DH</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="text-end mb-4">
                <button type="button" class="btn btn-secondary me-2">Annuler</button>
                <button type="button" class="btn btn-primary" id="saveDemandeBtn">Enregistrer la Demande</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Sélection d'Article -->
<div class="modal fade" id="articleModal" tabindex="-1" aria-labelledby="articleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="articleModalLabel">Sélectionner un Article</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="flex-grow-1 me-2">
                        <input type="text" class="form-control" id="articleSearch" placeholder="Rechercher un article...">
                    </div>
                    <button type="button" class="btn btn-success" id="newArticleBtn">
                        <i class="bi bi-plus-circle me-1"></i>Nouvel Article
                    </button>
                </div>
                <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                    <table class="table table-hover" id="articlesModalTable">
                        <thead class="sticky-top bg-light">
                            <tr>
                                <th>Référence</th>
                                <th>Nom</th>
                                <th>Marque</th>
                                <th>Prix</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for article in articles %}
                                <tr>
                                    <td>{{ article.reference }}</td>
                                    <td>{{ article.nom }}</td>
                                    <td>{{ article.marque }}</td>
                                    <td><span class="fw-bold text-danger">{{ article.prix|number_format(2, ',', ' ') }} DH</span></td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-primary select-article" 
                                                data-id="{{ article.id }}" 
                                                data-reference="{{ article.reference }}" 
                                                data-nom="{{ article.nom }}" 
                                                data-prix="{{ article.prix }}">
                                            Sélectionner
                                        </button>
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Nouvel Article -->
<div class="modal fade" id="newArticleModal" tabindex="-1" aria-labelledby="newArticleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header" style="background: linear-gradient(90deg, #1e3a8a, #3b82f6); color: white;">
                <h5 class="modal-title" id="newArticleModalLabel"><i class="bi bi-plus-circle me-2"></i>Ajouter un Nouvel Article</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="newArticleForm">
                    <!-- Première ligne: Type d'article -->
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label class="form-label d-block">Type d'article*</label>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="articleType" id="type_consommable" value="Consommable" required checked>
                                <label class="form-check-label" for="type_consommable">Consommable</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" name="articleType" id="type_non_consommable" value="Non Consommable" required>
                                <label class="form-check-label" for="type_non_consommable">Non consommable</label>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Deuxième ligne: Désignation et Marque -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="articleNom" class="form-label">Désignation*</label>
                            <input type="text" class="form-control" id="articleNom" required>
                        </div>
                        <div class="col-md-6">
                            <label for="articleMarque" class="form-label">Marque*</label>
                            <input type="text" class="form-control" id="articleMarque" required>
                        </div>
                    </div>
                    
                    <!-- Troisième ligne: Référence et Unité -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="articleReference" class="form-label">Référence*</label>
                            <input type="text" class="form-control" id="articleReference" required>
                        </div>
                        <div class="col-md-6">
                            <label for="articleUnite" class="form-label">Unité*</label>
                            <select class="form-select" id="articleUnite" required>
                                <option value="" disabled selected>Choisir...</option>
                                <option value="Pièce">Pièce</option>
                                <option value="Unité">Unité</option>
                                <option value="Boîte">Boîte</option>
                                <option value="Sachet">Sachet</option>
                                <option value="Lot">Lot</option>
                                <option value="Kg">Kg</option>
                                <option value="L">L</option>
                                <option value="m">m</option>
                                <option value="m²">m²</option>
                                <option value="m³">m³</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Quatrième ligne: Prix -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="articlePrix" class="form-label">Prix* (DH)</label>
                            <input type="number" class="form-control" id="articlePrix" step="0.01" min="0" required>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="articleDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="articleDescription" rows="3"></textarea>
                    </div>
                    
                    <div class="alert alert-danger d-none" id="form-errors"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" id="saveNewArticleBtn" style="background: linear-gradient(90deg, #1e3a8a, #3b82f6); border: none;">
                    <i class="bi bi-save me-1"></i> Enregistrer
                </button>
            </div>
        </div>
    </div>
</div>

{% block page_javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const articleModal = new bootstrap.Modal(document.getElementById('articleModal'));
    const articlesBody = document.getElementById('articlesBody');
    const emptyArticlesMessage = document.getElementById('emptyArticlesMessage');
    const addArticleBtn = document.getElementById('addArticleBtn');
    const articleSearch = document.getElementById('articleSearch');
    const tvaBadges = document.querySelectorAll('.tva-badge');
    const tvaInput = document.getElementById('tva');
    const tvaPercent = document.getElementById('tvaPercent');
    const totalHT = document.getElementById('totalHT');
    const totalTVA = document.getElementById('totalTVA');
    const totalTTC = document.getElementById('totalTTC');
    const saveDemandeBtn = document.getElementById('saveDemandeBtn');
    
    let articles = [];
    
    // Fonction pour afficher/masquer le message d'articles vides
    function toggleEmptyMessage() {
        if (articles.length === 0) {
            emptyArticlesMessage.style.display = 'block';
        } else {
            emptyArticlesMessage.style.display = 'none';
        }
    }
    
    // Fonction pour mettre à jour les totaux
    function updateTotals() {
        let totalHtValue = 0;
        
        articles.forEach(article => {
            const prixTotal = article.quantite * article.prix;
            totalHtValue += prixTotal;
        });
        
        const tvaValue = parseFloat(tvaInput.value);
        const totalTvaValue = totalHtValue * (tvaValue / 100);
        const totalTtcValue = totalHtValue + totalTvaValue;
        
        totalHT.textContent = totalHtValue.toFixed(2) + ' DH';
        totalTVA.textContent = totalTvaValue.toFixed(2) + ' DH';
        totalTTC.textContent = totalTtcValue.toFixed(2) + ' DH';
    }
    
    // Fonction pour ajouter un article à la table
    function addArticleToTable(article) {
        const newRow = document.createElement('tr');
        
        // Vérifier s'il s'agit d'un nouvel article ou d'un article existant
        const isNewArticle = article.id.toString().startsWith('new_');
        
        // Ajouter une classe spéciale pour les nouveaux articles pour l'animation
        newRow.className = isNewArticle ? 'article-row new-article' : 'article-row';
        newRow.dataset.id = article.id;
        
        newRow.innerHTML = `
            <td class="article-select">
                ${article.nom} 
                <small class="text-muted d-block">${article.reference}</small>
                ${isNewArticle ? '<span class="badge bg-success">Nouveau</span>' : ''}
            </td>
            <td>
                <input type="text" class="form-control fournisseur-input" value="${article.fournisseur}" placeholder="Fournisseur">
            </td>
            <td>
                <input type="number" class="form-control quantite-input" value="${article.quantite}" min="1">
            </td>
            <td>
                <input type="number" class="form-control prix-input" value="${article.prix}" min="0.01" step="0.01">
            </td>
            <td class="article-total">${(article.quantite * article.prix).toFixed(2)} DH</td>
            <td>
                <!-- Icône de suppression retirée -->
            </td>
        `;
        
        articlesBody.appendChild(newRow);
        
        // Ajouter les écouteurs d'événements
        const quantiteInput = newRow.querySelector('.quantite-input');
        const prixInput = newRow.querySelector('.prix-input');
        const fournisseurInput = newRow.querySelector('.fournisseur-input');
        const totalCell = newRow.querySelector('.article-total');
        
        // Mise à jour de la quantité
        quantiteInput.addEventListener('change', function() {
            const index = articles.findIndex(a => a.id === article.id);
            if (index !== -1) {
                articles[index].quantite = parseInt(this.value) || 1;
                totalCell.textContent = (articles[index].quantite * articles[index].prix).toFixed(2) + ' DH';
                updateTotals();
            }
        });
        
        // Mise à jour du prix
        prixInput.addEventListener('change', function() {
            const index = articles.findIndex(a => a.id === article.id);
            if (index !== -1) {
                articles[index].prix = parseFloat(this.value) || article.prix;
                totalCell.textContent = (articles[index].quantite * articles[index].prix).toFixed(2) + ' DH';
                updateTotals();
            }
        });
        
        // Mise à jour du fournisseur
        fournisseurInput.addEventListener('change', function() {
            const index = articles.findIndex(a => a.id === article.id);
            if (index !== -1) {
                articles[index].fournisseur = this.value;
            }
        });
    }
    
    // Afficher le modal pour ajouter un article
    addArticleBtn.addEventListener('click', function() {
        articleModal.show();
    });
    
    // Recherche d'articles dans le modal
    articleSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = document.querySelectorAll('#articlesModalTable tbody tr');
        
        rows.forEach(row => {
            const reference = row.cells[0].textContent.toLowerCase();
            const name = row.cells[1].textContent.toLowerCase();
            const marque = row.cells[2].textContent.toLowerCase();
            
            if (reference.includes(searchTerm) || name.includes(searchTerm) || marque.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    });
    
    // Sélection d'un article dans le modal
    document.querySelectorAll('.select-article').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.dataset.id;
            const reference = this.dataset.reference;
            const nom = this.dataset.nom;
            const prix = parseFloat(this.dataset.prix);
            
            // Vérifier si l'article est déjà dans la liste
            if (articles.some(a => a.id === id)) {
                alert('Cet article est déjà dans la liste.');
                return;
            }
            
            const article = {
                id: id,
                reference: reference,
                nom: nom,
                prix: prix,
                quantite: 1,
                fournisseur: ''
            };
            
            articles.push(article);
            addArticleToTable(article);
            toggleEmptyMessage();
            updateTotals();
            articleModal.hide();
        });
    });
    
    // Gestion du modal pour créer un nouvel article
    const newArticleBtn = document.getElementById('newArticleBtn');
    const newArticleModal = new bootstrap.Modal(document.getElementById('newArticleModal'));
    const saveNewArticleBtn = document.getElementById('saveNewArticleBtn');
    
    // Ouvrir le modal pour créer un nouvel article
    newArticleBtn.addEventListener('click', function() {
        // Masquer le modal de sélection et afficher le modal de création
        articleModal.hide();
        
        // Réinitialiser le formulaire de nouvel article
        document.getElementById('newArticleForm').reset();
        
        // Afficher le modal de création
        setTimeout(() => {
            newArticleModal.show();
        }, 500);
    });
    
    // Enregistrer un nouvel article
    saveNewArticleBtn.addEventListener('click', function() {
        // Récupérer les valeurs du formulaire
        const form = document.getElementById('newArticleForm');
        const reference = document.getElementById('articleReference').value;
        const nom = document.getElementById('articleNom').value;
        const marque = document.getElementById('articleMarque').value;
        const unite = document.getElementById('articleUnite').value;
        const prix = parseFloat(document.getElementById('articlePrix').value);
        const type = document.querySelector('input[name="articleType"]:checked')?.value;
        const description = document.getElementById('articleDescription').value;
        
        // Récupérer le conteneur d'erreurs
        const formErrors = document.getElementById('form-errors');
        formErrors.classList.add('d-none');
        formErrors.innerHTML = '';
        
        // Validation avancée
        let errors = [];
        
        if (!reference) errors.push("La référence est obligatoire");
        if (!nom) errors.push("La désignation est obligatoire");
        if (!marque) errors.push("La marque est obligatoire");
        if (!unite || unite === '') errors.push("L'unité est obligatoire");
        if (isNaN(prix) || prix <= 0) errors.push("Le prix doit être un nombre positif");
        if (!type) errors.push("Le type d'article est obligatoire");
        
        // Afficher les erreurs si nécessaire
        if (errors.length > 0) {
            formErrors.classList.remove('d-none');
            errors.forEach(error => {
                formErrors.innerHTML += `<div><i class="bi bi-exclamation-triangle me-2"></i>${error}</div>`;
            });
            return;
        }
        
        // Désactiver le bouton pour éviter les soumissions multiples
        saveNewArticleBtn.disabled = true;
        saveNewArticleBtn.innerHTML = '<i class="spinner-border spinner-border-sm me-1"></i> Traitement en cours...';
        
        // Simuler un ID pour le nouvel article (en production, cette valeur viendrait du serveur)
        const tempId = 'new_' + Date.now();
        
        // Créer l'objet article avec toutes les données du formulaire
        const newArticleData = {
            reference: reference,
            nom: nom,
            marque: marque,
            unite: unite,
            prix: prix,
            type: type,
            description: description
        };
        
        // En production, on enverrait ces données au serveur via une requête AJAX
        console.log('Nouvel article à enregistrer:', newArticleData);
        
        // Ajouter le nouvel article à la liste des articles pour la demande
        const article = {
            id: tempId,  // ID temporaire, à remplacer par l'ID réel retourné par le serveur
            reference: reference,
            nom: nom,
            marque: marque,
            unite: unite,
            prix: prix,
            type: type,
            description: description,
            quantite: 1,
            fournisseur: ''
        };
        
        // Ajouter à la liste et à la table
        articles.push(article);
        addArticleToTable(article);
        toggleEmptyMessage();
        updateTotals();
        
        // Réinitialiser le formulaire
        form.reset();
        document.getElementById('type_consommable').checked = true;
        
        // Fermer le modal et afficher un message de confirmation
        newArticleModal.hide();
        
        // Afficher une notification stylisée au lieu d'un simple alert
        const toast = document.createElement('div');
        toast.className = 'position-fixed bottom-0 end-0 p-3';
        toast.style.zIndex = '5';
        toast.innerHTML = `
            <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-success text-white">
                    <i class="bi bi-check-circle me-2"></i>
                    <strong class="me-auto">Succès</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    Article "${nom}" créé avec succès et ajouté à la demande.
                </div>
            </div>
        `;
        document.body.appendChild(toast);
        
        // Réactiver le bouton
        saveNewArticleBtn.disabled = false;
        saveNewArticleBtn.innerHTML = '<i class="bi bi-save me-1"></i> Enregistrer';
        
        // En environnement réel, il faudrait :
        // 1. Envoyer les données au serveur
        // 2. Récupérer l'ID réel de l'article créé
        // 3. Mettre à jour l'ID dans la liste des articles
        // 4. Ajouter l'article à la table des articles disponibles
    });
    
    // Gestion des badges TVA
    tvaBadges.forEach(badge => {
        badge.addEventListener('click', function() {
            tvaBadges.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            const tvaValue = this.dataset.tva;
            tvaInput.value = tvaValue;
            tvaPercent.textContent = tvaValue;
            updateTotals();
        });
    });
    
    // Enregistrement de la demande
    saveDemandeBtn.addEventListener('click', function() {
        if (articles.length === 0) {
            alert('Veuillez ajouter au moins un article à la demande.');
            return;
        }
        
        // Désactiver le bouton pour éviter les soumissions multiples
        saveDemandeBtn.disabled = true;
        saveDemandeBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Traitement en cours...';
        
        // Vérifier s'il y a des nouveaux articles à créer d'abord
        const newArticles = articles.filter(article => article.id.toString().startsWith('new_'));
        const existingArticles = articles.filter(article => !article.id.toString().startsWith('new_'));
        
        const demandeData = {
            // Date et état gérés côté serveur
            tva: parseInt(tvaInput.value),
            // Pour les articles existants, on envoie simplement l'ID
            existingArticles: existingArticles.map(article => ({
                articleId: article.id,
                quantite: article.quantite,
                fournisseur: article.fournisseur,
                prixUnitaire: article.prix
            })),
            // Pour les nouveaux articles, on envoie toutes les informations nécessaires
            newArticles: newArticles.map(article => ({
                reference: article.reference,
                nom: article.nom,
                marque: article.marque,
                unite: article.unite,
                type: article.type,
                description: article.description,
                prix: article.prix,
                quantite: article.quantite,
                fournisseur: article.fournisseur
            }))
        };
        
        // Vérifier que les données sont valides pour JSON
        let jsonData;
        try {
            jsonData = JSON.stringify(demandeData);
            console.log('Données envoyées au serveur:', demandeData);
        } catch (e) {
            console.error('Erreur lors de la conversion en JSON:', e, demandeData);
            alert('Erreur: Données invalides pour JSON. Voir console pour détails.');
            saveDemandeBtn.disabled = false;
            saveDemandeBtn.innerHTML = 'Enregistrer la Demande';
            return;
        }
        
        // Créer la demande d'achat via une requête AJAX
        fetch('{{ path('app_demand_achat_new') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: jsonData
        })
        .then(response => {
            if (!response.ok) {
                // Si la réponse est une erreur, essayons quand même de récupérer le message JSON
                return response.json().then(errorData => {
                    console.error('Erreur serveur détaillée:', errorData);
                    throw new Error('Erreur réseau: ' + response.status + 
                        (errorData.message ? ' - ' + errorData.message : ''));
                }).catch(e => {
                    // Si on ne peut pas parser la réponse en JSON, on utilise l'erreur standard
                    throw new Error('Erreur réseau: ' + response.status);
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Afficher un message de confirmation avec le nombre d'articles
                const totalArticles = articles.length;
                const nouveauxArticles = newArticles.length;
                let message = `Demande d'achat créée avec succès (${totalArticles} article(s)`;
                
                if (nouveauxArticles > 0) {
                    message += ` dont ${nouveauxArticles} nouveau(x) article(s)`;
                }
                
                alert(message + '). Redirection vers la liste des demandes...');
                
                // Rediriger vers la liste des demandes ou la vue détaillée de la demande créée
                window.location.href = '{{ path('app_demand_achat') }}';
            } else {
                // En cas d'erreur côté serveur
                alert('Erreur: ' + (data.message || 'Une erreur est survenue'));
                // Réactiver le bouton
                saveDemandeBtn.disabled = false;
                saveDemandeBtn.innerHTML = 'Enregistrer la Demande';
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            
            // Créer un toast d'erreur plus détaillé
            const toast = document.createElement('div');
            toast.className = 'position-fixed bottom-0 end-0 p-3';
            toast.style.zIndex = '5';
            toast.innerHTML = `
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header bg-danger text-white">
                        <i class="bi bi-exclamation-circle me-2"></i>
                        <strong class="me-auto">Erreur</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        <p><strong>${error.message}</strong></p>
                        <p class="mb-0">Merci de réessayer ou de contacter l'administrateur si le problème persiste.</p>
                    </div>
                </div>
            `;
            document.body.appendChild(toast);
            
            // Fermer le toast après 10 secondes
            setTimeout(() => {
                const toastElement = toast.querySelector('.toast');
                const bsToast = new bootstrap.Toast(toastElement);
                bsToast.hide();
            }, 10000);
            
            // Réactiver le bouton
            saveDemandeBtn.disabled = false;
            saveDemandeBtn.innerHTML = 'Enregistrer la Demande';
        });
    });
    
    // Initialisation
    toggleEmptyMessage();
    updateTotals();
});
</script>
{% endblock %}
{% endblock %}
