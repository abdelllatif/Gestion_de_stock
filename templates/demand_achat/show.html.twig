{% extends 'base.html.twig' %}

{% block title %}Détails de la Demande d'Achat{% endblock %}

{% block stylesheets %}
<style>
    .status-badge {
        font-size: 0.9rem;
        padding: 0.5rem 0.75rem;
    }
    .details-table th {
        width: 30%;
    }
    .article-row {
        transition: all 0.2s;
    }
    .article-row:hover {
        background-color: #f8f9fa;
    }
    .section-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #1e3a8a;
        border-bottom: 2px solid #3b82f6;
        padding-bottom: 0.5rem;
        margin-bottom: 1.25rem;
    }
    
    /* Styles pour l'impression PDF */
    @media print {
        .no-print {
            display: none !important;
        }
        .print-only {
            display: block !important;
        }
        body {
            font-family: Arial, sans-serif;
            font-size: 12pt;
        }
        .container-fluid {
            width: 100%;
            padding: 15px;
        }
        .card {
            border: 1px solid #ddd !important;
            margin-bottom: 15px !important;
        }
        .card-header {
            background-color: #f8f9fa !important;
            border-bottom: 1px solid #ddd !important;
            padding: 10px !important;
        }
    }
    .print-only {
        display: none;
    }
</style>
{% endblock %}

{% block head_javascripts %}
{{ parent() }}
<!-- Inclure html2pdf -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
{% endblock %}

{% block body %}
<div class="container-fluid px-4 py-3">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Détails de la Demande d'Achat #{{ demande.id }}</h1>
        <div>
            <a href="{{ path('app_demand_achat') }}" class="btn btn-outline-secondary me-2">
                <i class="bi bi-arrow-left me-1"></i> Retour à la liste
            </a>
            <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                    Actions <i class="bi bi-chevron-down ms-1"></i>
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    {% if demande.etat == 'En attente' %}
                        <li><a class="dropdown-item" href="{{ path('app_demand_achat_edit', {'id': demande.id}) }}"><i class="bi bi-pencil me-2"></i>Modifier</a></li>
                    {% else %}
                        <li><a class="dropdown-item" href="#" id="quickViewModalTrigger" data-id="{{ demande.id }}"><i class="bi bi-eye me-2"></i>Voir détails</a></li>
                    {% endif %}
                    <li><a class="dropdown-item" href="#" id="dropdownExportPdf"><i class="bi bi-file-earmark-pdf me-2"></i>Exporter en PDF</a></li>
                    <!-- Option de suppression retirée -->
                </ul>
            </div>
        </div>
    </div>
    
    <div class="row">
        <!-- Informations générales -->
        <div class="col-md-5">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0">Informations Générales</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <span class="h6 mb-0">État:</span>
                        <span class="badge status-badge {% if demande.etat == 'En attente' %}bg-warning{% elseif demande.etat == 'Approuvée' %}bg-success{% elseif demande.etat == 'Rejetée' %}bg-danger{% else %}bg-secondary{% endif %}">
                            {{ demande.etat }}
                        </span>
                    </div>
                    
                    <table class="table details-table">
                        <tr>
                            <th>Numéro</th>
                            <td>{{ demande.id }}</td>
                        </tr>
                        <tr>
                            <th>Date</th>
                            <td>{{ demande.date|date('d/m/Y') }}</td>
                        </tr>
                        <tr>
                            <th>Utilisateur</th>
                            <td>{{ demande.uilisateur ? demande.uilisateur.nom ~ ' ' ~ demande.uilisateur.prenom : 'N/A' }}</td>
                        </tr>
                        <tr>
                            <th>Total HT</th>
                            <td>{{ demande.montantHT|number_format(2, ',', ' ') }} DH</td>
                        </tr>
                        <tr>
                            <th>TVA</th>
                            <td>{{ demande.tva }}%</td>
                        </tr>
                        <tr>
                            <th>Total TTC</th>
                            <td class="h5 text-primary">{{ demande.montantTTC|number_format(2, ',', ' ') }} DH</td>
                        </tr>
                    </table>
                    
                    <div class="mt-3">
                        <div class="section-title">Historique</div>
                        <ul class="list-group">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="fw-bold">Créée</span>
                                    <small class="d-block text-muted">par {{ demande.uilisateur ? demande.uilisateur.nom ~ ' ' ~ demande.uilisateur.prenom : 'N/A' }}</small>
                                </div>
                                <small class="text-muted">{{ demande.date|date('d/m/Y H:i') }}</small>
                            </li>
                            <!-- Ajoutez d'autres événements ici si nécessaire -->
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Articles de la demande -->
        <div class="col-md-7">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0">Articles Demandés</h5>
                </div>
                <div class="card-body">
                    {% if demande.demandeDetails is empty %}
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            Aucun article n'a été ajouté à cette demande.
                        </div>
                    {% else %}
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Article</th>
                                        <th>Fournisseur</th>
                                        <th>Quantité</th>
                                        <th>Prix Unitaire</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for detail in demande.demandeDetails %}
                                        <tr class="article-row">
                                            <td>
                                                {{ detail.article.nom }}
                                                <small class="d-block text-muted">{{ detail.article.reference }}</small>
                                            </td>
                                            <td>{{ detail.fournisseur }}</td>
                                            <td>{{ detail.quantite }}</td>
                                            <td>{{ detail.prixUnitaire|number_format(2, ',', ' ') }} DH</td>
                                            <td>{{ detail.prixTotal|number_format(2, ',', ' ') }} DH</td>
                                        </tr>
                                    {% endfor %}
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="3"></td>
                                        <td class="fw-bold">Total HT</td>
                                        <td>{{ demande.montantHT|number_format(2, ',', ' ') }} DH</td>
                                    </tr>
                                    <tr>
                                        <td colspan="3"></td>
                                        <td class="fw-bold">TVA ({{ demande.tva }}%)</td>
                                        <td>{{ (demande.montantTTC - demande.montantHT)|number_format(2, ',', ' ') }} DH</td>
                                    </tr>
                                    <tr>
                                        <td colspan="3"></td>
                                        <td class="fw-bold">Total TTC</td>
                                        <td class="fw-bold">{{ demande.montantTTC|number_format(2, ',', ' ') }} DH</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    {% endif %}
                </div>
            </div>
            
            <!-- Actions sur la demande -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0">Actions</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            {% if demande.etat == 'En attente' %}
                                <button type="button" id="approveBtn" class="btn btn-success w-100 mb-3" data-id="{{ demande.id }}">
                                    <i class="bi bi-check-circle me-2"></i>Approuver la demande
                                </button>
                                <button type="button" id="rejectBtn" class="btn btn-danger w-100" data-id="{{ demande.id }}">
                                    <i class="bi bi-x-circle me-2"></i>Rejeter la demande
                                </button>
                            {% else %}
                                <button type="button" id="changeStatusBtn" class="btn btn-outline-primary w-100" data-id="{{ demande.id }}" data-etat="{{ demande.etat }}">
                                    <i class="bi bi-arrow-repeat me-2"></i>Changer l'état
                                </button>
                            {% endif %}
                        </div>
                        <div class="col-md-6">
                            <button type="button" class="btn btn-outline-danger w-100" id="exportPdfBtn">
                                <i class="bi bi-file-earmark-pdf me-2"></i>Exporter en PDF
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de changement de statut -->
<div class="modal fade" id="statusModal" tabindex="-1" aria-labelledby="statusModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header" style="background: linear-gradient(90deg, #1e3a8a, #3b82f6); color: white;">
        <h5 class="modal-title" id="statusModalLabel"><i class="bi bi-arrow-repeat me-2"></i>Changer le statut de la demande</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="statusForm">
          <input type="hidden" id="statusDemandeId">
          <div class="mb-3">
            <label for="newEtat" class="form-label">Nouveau statut</label>
            <select class="form-select" id="newEtat" required>
              <option value="En attente">En attente</option>
              <option value="Approuvée">Approuvée</option>
              <option value="Rejetée">Rejetée</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Annuler</button>
        <button type="button" class="btn btn-primary" id="saveStatusBtn" style="background: linear-gradient(90deg, #1e3a8a, #3b82f6); border: none;">
            <i class="bi bi-save me-1"></i> Enregistrer
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal de visualisation rapide -->
<div class="modal fade" id="quickViewModal" tabindex="-1" aria-labelledby="quickViewModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header" style="background: linear-gradient(90deg, #1e3a8a, #3b82f6); color: white;">
        <h5 class="modal-title" id="quickViewModalLabel"><i class="bi bi-eye me-2"></i>Détails de la demande</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="text-center mb-3" id="quickViewModalLoading">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Chargement...</span>
          </div>
          <p class="mt-2">Chargement des détails...</p>
        </div>
        <div id="quickViewModalContent" style="display: none;">
          <!-- Le contenu sera rempli par JavaScript -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Fermer</button>
        <button type="button" class="btn btn-primary" id="quickViewModalExportPdf" style="background: linear-gradient(90deg, #1e3a8a, #3b82f6); border: none;">
          <i class="bi bi-file-earmark-pdf me-1"></i> Exporter en PDF
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Toast de confirmation -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5" id="toastContainer"></div>

<!-- Conteneur caché pour la génération du PDF -->
<div id="pdf-container" class="d-none"></div>

{% block page_javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialisation des éléments Bootstrap
    const statusModal = new bootstrap.Modal(document.getElementById('statusModal'));
    const quickViewModal = new bootstrap.Modal(document.getElementById('quickViewModal'));
    const statusDemandeId = document.getElementById('statusDemandeId');
    const newEtat = document.getElementById('newEtat');
    const saveStatusBtn = document.getElementById('saveStatusBtn');
    const quickViewModalContent = document.getElementById('quickViewModalContent');
    const quickViewModalLoading = document.getElementById('quickViewModalLoading');
    
    // Gestion des boutons d'approbation et de rejet
    const approveBtn = document.getElementById('approveBtn');
    const rejectBtn = document.getElementById('rejectBtn');
    const changeStatusBtn = document.getElementById('changeStatusBtn');
    
    // Fonction pour créer et afficher un toast
    function showToast(message, type = 'success') {
        const toastEl = document.createElement('div');
        toastEl.className = 'toast';
        toastEl.setAttribute('role', 'alert');
        toastEl.setAttribute('aria-live', 'assertive');
        toastEl.setAttribute('aria-atomic', 'true');
        
        toastEl.innerHTML = `
            <div class="toast align-items-center text-white bg-${type} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i> ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        `;
        
        document.getElementById('toastContainer').appendChild(toastEl);
        const toast = new bootstrap.Toast(toastEl.querySelector('.toast'));
        toast.show();
        
        // Supprimer le toast après qu'il se soit caché
        toastEl.addEventListener('hidden.bs.toast', function() {
            toastEl.remove();
        });
    }
    
    // Fonction pour changer le statut
    function changeDemandeStatus(demandeId, newStatus, button) {
        // Désactiver le bouton et montrer un spinner
        const originalContent = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i> Traitement en cours...';
        
        // Appel API pour changer le statut
        fetch(`/demande/achat/${demandeId}/status`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ etat: newStatus })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Erreur lors de la mise à jour du statut');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showToast(`La demande a été ${newStatus === 'Approuvée' ? 'approuvée' : 'rejetée'} avec succès!`, 'success');
                
                // Recharger la page après un délai
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                showToast('Erreur: ' + (data.message || 'Impossible de modifier le statut'), 'danger');
                // Réinitialiser le bouton
                button.disabled = false;
                button.innerHTML = originalContent;
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Une erreur est survenue lors de la mise à jour.', 'danger');
            
            // Réinitialiser le bouton
            button.disabled = false;
            button.innerHTML = originalContent;
        });
    }
    
    // Cette fonction n'est pas utilisée et est redondante avec le code plus bas 
    // qui traite déjà les détails du modal de visualisation
    // Elle est donc supprimée pour éviter les confusions
    
    // Gestionnaire pour le bouton d'approbation
    if (approveBtn) {
        approveBtn.addEventListener('click', function() {
            if (confirm('Êtes-vous sûr de vouloir approuver cette demande?')) {
                const demandeId = this.getAttribute('data-id');
                changeDemandeStatus(demandeId, 'Approuvée', this);
            }
        });
    }
    
    // Gestionnaire pour le bouton de rejet
    if (rejectBtn) {
        rejectBtn.addEventListener('click', function() {
            if (confirm('Êtes-vous sûr de vouloir rejeter cette demande?')) {
                const demandeId = this.getAttribute('data-id');
                changeDemandeStatus(demandeId, 'Rejetée', this);
            }
        });
    }
    
    // Gestionnaire pour le bouton de changement d'état
    if (changeStatusBtn) {
        changeStatusBtn.addEventListener('click', function() {
            const demandeId = this.getAttribute('data-id');
            const currentEtat = this.getAttribute('data-etat');
            
            statusDemandeId.value = demandeId;
            newEtat.value = currentEtat;
            
            statusModal.show();
        });
    }
    
    // Gestionnaire pour le bouton de sauvegarde du modal
    saveStatusBtn.addEventListener('click', function() {
        const demandeId = statusDemandeId.value;
        const etat = newEtat.value;
        
        // Désactiver le bouton pendant la soumission
        saveStatusBtn.disabled = true;
        saveStatusBtn.innerHTML = '<i class="spinner-border spinner-border-sm me-1"></i> Traitement en cours...';
        
        fetch(`/demande/achat/${demandeId}/status`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ etat: etat })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Erreur lors de la mise à jour');
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showToast('Statut de la demande modifié avec succès!', 'success');
                
                // Recharger la page après un délai
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
                
                // Fermer le modal
                statusModal.hide();
            } else {
                showToast('Erreur: ' + (data.message || 'Impossible de modifier le statut'), 'danger');
                // Réinitialiser le bouton
                saveStatusBtn.disabled = false;
                saveStatusBtn.innerHTML = '<i class="bi bi-save me-1"></i> Enregistrer';
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Une erreur est survenue lors de la mise à jour.', 'danger');
            
            // Réinitialiser le bouton
            saveStatusBtn.disabled = false;
            saveStatusBtn.innerHTML = '<i class="bi bi-save me-1"></i> Enregistrer';
        });
    });
    
    // Fonction pour générer le PDF avec html2pdf
    function generatePdf() {
        // Préparer le contenu du PDF
        const demandeId = {{ demande.id }};
        const element = prepareContentForPdf();
        
        // Configuration html2pdf
        const options = {
            margin: 10,
            filename: `Demande_Achat_${demandeId}_${new Date().toISOString().slice(0, 10)}.pdf`,
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2, useCORS: true, logging: false },
            jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
        };

        // Générer le PDF
        return html2pdf().from(element).set(options).save();
    }

    // Fonction pour préparer le contenu HTML qui sera transformé en PDF
    function prepareContentForPdf() {
        // Créer un élément div qui contiendra le contenu du PDF
        const element = document.createElement('div');
        element.classList.add('pdf-content');
        
        // Entête du document
        const header = document.createElement('div');
        header.style.textAlign = 'center';
        header.style.marginBottom = '20px';
        header.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <div style="text-align: left;">
                    <h3>DinoTrav</h3>
                    <p>Entreprise de construction</p>
                    <p>Téléphone: +212 XXX XXXXXX</p>
                    <p>Email: contact@dinotrav.com</p>
                </div>
                <div>
                    <h2>DEMANDE D'ACHAT</h2>
                    <h3>N° {{ demande.id }}</h3>
                </div>
            </div>
            <div style="text-align: right; margin-bottom: 20px;">
                <p><strong>Date:</strong> {{ demande.date|date('d/m/Y') }}</p>
                <p><strong>État:</strong> {{ demande.etat }}</p>
            </div>
        `;
        element.appendChild(header);
        
        // Informations de la demande
        const demandeInfo = document.createElement('div');
        demandeInfo.style.marginBottom = '20px';
        demandeInfo.innerHTML = `
            <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
                <tr>
                    <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Utilisateur</th>
                    <td style="border: 1px solid #ddd; padding: 8px;">{{ demande.uilisateur ? demande.uilisateur.nom ~ ' ' ~ demande.uilisateur.prenom : 'N/A' }}</td>
                </tr>
                <tr>
                    <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Total HT</th>
                    <td style="border: 1px solid #ddd; padding: 8px;">{{ demande.montantHT|number_format(2, ',', ' ') }} DH</td>
                </tr>
                <tr>
                    <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">TVA</th>
                    <td style="border: 1px solid #ddd; padding: 8px;">{{ demande.tva }}%</td>
                </tr>
                <tr>
                    <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Total TTC</th>
                    <td style="border: 1px solid #ddd; padding: 8px; font-weight: bold;">{{ demande.montantTTC|number_format(2, ',', ' ') }} DH</td>
                </tr>
            </table>
        `;
        element.appendChild(demandeInfo);
        
        // Tableau des articles
        const articlesTable = document.createElement('div');
        articlesTable.innerHTML = `
            <h3 style="margin-bottom: 10px;">Articles Demandés</h3>
            <table style="width: 100%; border-collapse: collapse;">
                <thead>
                    <tr style="background-color: #f2f2f2;">
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Article</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">Fournisseur</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: right;">Quantité</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: right;">Prix Unitaire</th>
                        <th style="border: 1px solid #ddd; padding: 8px; text-align: right;">Total</th>
                    </tr>
                </thead>
                <tbody>
                    {% for detail in demande.demandeDetails %}
                        <tr>
                            <td style="border: 1px solid #ddd; padding: 8px;">
                                {{ detail.article.nom }}
                                <br><small>{{ detail.article.reference }}</small>
                            </td>
                            <td style="border: 1px solid #ddd; padding: 8px;">{{ detail.fournisseur }}</td>
                            <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">{{ detail.quantite }}</td>
                            <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">{{ detail.prixUnitaire|number_format(2, ',', ' ') }} DH</td>
                            <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">{{ detail.prixTotal|number_format(2, ',', ' ') }} DH</td>
                        </tr>
                    {% endfor %}
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3" style="border: 1px solid #ddd; padding: 8px;"></td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: right; font-weight: bold;">Total HT</td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">{{ demande.montantHT|number_format(2, ',', ' ') }} DH</td>
                    </tr>
                    <tr>
                        <td colspan="3" style="border: 1px solid #ddd; padding: 8px;"></td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: right; font-weight: bold;">TVA ({{ demande.tva }}%)</td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">{{ (demande.montantTTC - demande.montantHT)|number_format(2, ',', ' ') }} DH</td>
                    </tr>
                    <tr>
                        <td colspan="3" style="border: 1px solid #ddd; padding: 8px;"></td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: right; font-weight: bold;">Total TTC</td>
                        <td style="border: 1px solid #ddd; padding: 8px; text-align: right; font-weight: bold;">{{ demande.montantTTC|number_format(2, ',', ' ') }} DH</td>
                    </tr>
                </tfoot>
            </table>
        `;
        element.appendChild(articlesTable);
        
        // Pied de page
        const footer = document.createElement('div');
        footer.style.marginTop = '30px';
        footer.style.textAlign = 'center';
        footer.innerHTML = `
            <div style="margin-top: 50px; display: flex; justify-content: space-between;">
                <div style="width: 40%; text-align: center;">
                    <p style="margin-bottom: 50px;">Signature du demandeur</p>
                    <div style="border-top: 1px solid #000;"></div>
                </div>
                <div style="width: 40%; text-align: center;">
                    <p style="margin-bottom: 50px;">Signature du responsable</p>
                    <div style="border-top: 1px solid #000;"></div>
                </div>
            </div>
        `;
        element.appendChild(footer);
        
        return element;
    }
    
    // Fonction pour gérer l'export PDF
    function handlePdfExport(button) {
        // Désactiver le bouton et afficher un spinner pendant le chargement
        button.disabled = true;
        const originalContent = button.innerHTML;
        button.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i> Génération en cours...';
        
        try {
            // Générer le PDF avec html2pdf côté client
            generatePdf()
                .then(() => {
                    console.log('PDF généré avec succès');
                    showToast('Le PDF a été généré et téléchargé avec succès.', 'success');
                })
                .catch(error => {
                    console.error('Erreur lors de la génération du PDF:', error);
                    showToast('Une erreur est survenue lors de la génération du PDF.', 'danger');
                })
                .finally(() => {
                    // Réactiver le bouton quoi qu'il arrive
                    button.disabled = false;
                    button.innerHTML = originalContent;
                });
        } catch (error) {
            console.error('Erreur inattendue:', error);
            showToast('Une erreur inattendue est survenue.', 'danger');
            
            // Réactiver le bouton
            button.disabled = false;
            button.innerHTML = originalContent;
        }
    }
    
    // Gestion du bouton d'export PDF
    const exportPdfBtn = document.getElementById('exportPdfBtn');
    if (exportPdfBtn) {
        console.log('Bouton exportPdfBtn trouvé, ajout du gestionnaire d\'événement');
        exportPdfBtn.addEventListener('click', function(e) {
            e.preventDefault(); // Empêcher le comportement par défaut du bouton
            console.log('Clic sur le bouton exportPdfBtn');
            handlePdfExport(this);
        });
    } else {
        console.warn('Bouton exportPdfBtn non trouvé dans le DOM');
    }
    
    // Gestion du lien d'export PDF dans le menu déroulant
    const dropdownExportPdf = document.getElementById('dropdownExportPdf');
    if (dropdownExportPdf) {
        console.log('Lien dropdownExportPdf trouvé, ajout du gestionnaire d\'événement');
        dropdownExportPdf.addEventListener('click', function(e) {
            e.preventDefault(); // Empêcher la navigation
            console.log('Clic sur le lien dropdownExportPdf');
            handlePdfExport(exportPdfBtn || this);
        });
    } else {
        console.warn('Lien dropdownExportPdf non trouvé dans le DOM');
    }
    
    // Gestion du modal de visualisation rapide
    // Note: quickViewModal est déjà défini plus haut
    const quickViewModalTrigger = document.getElementById('quickViewModalTrigger');
    // Note: quickViewModalContent et quickViewModalLoading sont déjà définis plus haut
    const quickViewModalExportPdf = document.getElementById('quickViewModalExportPdf');
    
    if (quickViewModalTrigger) {
        quickViewModalTrigger.addEventListener('click', function(e) {
            e.preventDefault();
            const demandeId = this.getAttribute('data-id');
            
            // Afficher le chargement
            quickViewModalContent.style.display = 'none';
            quickViewModalLoading.style.display = 'block';
            
            // Ouvrir le modal
            quickViewModal.show();
            
            // Charger les détails de la demande
            fetch(`/demande/achat/${demandeId}/data`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erreur lors du chargement des détails');
                    }
                    return response.json();
                })
                .then(data => {
                    // Construire l'aperçu avec les données récupérées
                    let html = `
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="mb-3">Informations générales</h5>
                                <table class="table table-striped">
                                    <tr>
                                        <th>Numéro</th>
                                        <td>${data.id}</td>
                                    </tr>
                                    <tr>
                                        <th>Date</th>
                                        <td>${data.date}</td>
                                    </tr>
                                    <tr>
                                        <th>État</th>
                                        <td>
                                            <span class="badge ${data.etat === 'En attente' ? 'bg-warning' : data.etat === 'Approuvée' ? 'bg-success' : 'bg-danger'}">
                                                ${data.etat}
                                            </span>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h5 class="mb-3">Détails financiers</h5>
                                <table class="table table-striped">
                                    <tr>
                                        <th>Total HT</th>
                                        <td>${data.montantHT.toFixed(2).replace('.', ',')} DH</td>
                                    </tr>
                                    <tr>
                                        <th>TVA</th>
                                        <td>${data.tva}%</td>
                                    </tr>
                                    <tr>
                                        <th>Total TTC</th>
                                        <td class="fw-bold">${data.montantTTC.toFixed(2).replace('.', ',')} DH</td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    `;
                    
                    // Mettre à jour le contenu
                    quickViewModalContent.innerHTML = html;
                    
                    // Cacher le chargement et afficher le contenu
                    quickViewModalLoading.style.display = 'none';
                    quickViewModalContent.style.display = 'block';
                    
                    // Mettre à jour l'ID pour le bouton d'export PDF
                    quickViewModalExportPdf.setAttribute('data-id', demandeId);
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    quickViewModalContent.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            Une erreur est survenue lors du chargement des détails.
                        </div>
                    `;
                    quickViewModalLoading.style.display = 'none';
                    quickViewModalContent.style.display = 'block';
                });
        });
    }
    
    // Gestion du bouton d'export PDF dans le modal de visualisation rapide
    if (quickViewModalExportPdf) {
        console.log('Bouton quickViewModalExportPdf trouvé, ajout du gestionnaire d\'événement');
        quickViewModalExportPdf.addEventListener('click', function(e) {
            e.preventDefault(); // Empêcher le comportement par défaut du bouton
            const demandeId = this.getAttribute('data-id');
            console.log('Clic sur le bouton quickViewModalExportPdf, demande ID:', demandeId);
            
            // Fermer le modal et lancer l'export PDF
            quickViewModal.hide();
            
            // S'assurer que le bouton est passé correctement
            if (exportPdfBtn) {
                handlePdfExport(exportPdfBtn);
            } else {
                handlePdfExport(this);
            }
        });
    } else {
        console.warn('Bouton quickViewModalExportPdf non trouvé dans le DOM');
    }
});
</script>
{% endblock %}
{% endblock %}
