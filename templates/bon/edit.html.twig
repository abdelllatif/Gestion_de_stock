{% extends 'base.html.twig' %}

{% block title %}Modifier un Bon{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<style>
    .form-label {
        font-weight: 500;
    }
    .item-row {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        position: relative;
    }
    .remove-item {
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
    }
    .badge-article {
        background-color: #3b82f6;
        color: white;
    }
    .badge-machine {
        background-color: #8b5cf6;
        color: white;
    }
    .item-title {
        font-weight: 600;
        margin-bottom: 10px;
    }
</style>
{% endblock %}

{% block body %}
<div class="container-fluid px-4 py-3">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Modifier le Bon <span class="text-secondary">#{{ bon.numeroSerie }}</span></h1>
        <div>
            <a href="{{ path('app_bon') }}" class="btn btn-outline-secondary me-2">
                <i class="bi bi-arrow-left me-2"></i>Retour à la liste
            </a>
            <a href="{{ path('app_bon_show', {'id': bon.id}) }}" class="btn btn-outline-primary">
                <i class="bi bi-eye me-2"></i>Voir les détails
            </a>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-12">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0">Informations du Bon</h5>
                </div>
                <div class="card-body">
                    <form id="editBonForm">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="typeSelect" class="form-label required">Type de Bon</label>
                                <select id="typeSelect" class="form-select" required>
                                    <option value="Entrée" {% if bon.type == 'Entrée' %}selected{% endif %}>Entrée</option>
                                    <option value="Sortie" {% if bon.type == 'Sortie' %}selected{% endif %}>Sortie</option>
                                    <option value="Livraison" {% if bon.type == 'Livraison' %}selected{% endif %}>Livraison</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="dateInput" class="form-label required">Date</label>
                                <input type="text" id="dateInput" class="form-control" value="{{ bon.date|date('d/m/Y') }}" required>
                            </div>
                            <div class="col-md-4">
                                <label for="numeroSerieInput" class="form-label required">Numéro de Série</label>
                                <input type="text" id="numeroSerieInput" class="form-control" value="{{ bon.numeroSerie }}" required>
                            </div>
                        </div>
                        
                        <div class="row mb-3" id="fournisseurRow" {% if bon.type != 'Livraison' %}style="display: none;"{% endif %}>
                            <div class="col-md-6">
                                <label for="fournisseurInput" class="form-label">Fournisseur</label>
                                <input type="text" id="fournisseurInput" class="form-control">
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label for="noteInput" class="form-label">Note</label>
                                <textarea id="noteInput" class="form-control" rows="3">{{ bon.note }}</textarea>
                            </div>
                        </div>
                        
                        <hr class="my-4">
                        
                        <h5 class="mb-3">Articles et Machines</h5>
                        
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h6 class="mb-0">Gérer les éléments</h6>
                                    <div>
                                        <button type="button" class="btn btn-outline-primary me-2" id="addArticleBtn">
                                            <i class="bi bi-plus-circle me-2"></i>Article
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" id="addMachineBtn">
                                            <i class="bi bi-plus-circle me-2"></i>Machine
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div id="itemsContainer">
                            <!-- Les articles et machines seront ajoutés ici -->
                            {% if bon.bonDetails|length > 0 %}
                                {% for detail in bon.bonDetails %}
                                    <div class="item-row" 
                                        data-type="{{ detail.article ? 'article' : 'machine' }}" 
                                        data-id="{{ detail.article ? detail.article.id : detail.machine.id }}"
                                        data-quantity="{{ detail.quantite }}"
                                        data-unite="{{ detail.unite }}"
                                        data-fournisseur="{{ detail.fournisseur }}">
                                        <span class="badge {{ detail.article ? 'badge-article' : 'badge-machine' }} mb-2">
                                            {% if detail.article %}Article{% else %}Machine{% endif %}
                                        </span>
                                        <button type="button" class="remove-item btn btn-sm btn-outline-danger">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                        <div class="row">
                                            <div class="col-md-5">
                                                <div class="item-title">
                                                    {% if detail.article %}
                                                        {{ detail.article.nom }} - {{ detail.article.reference }}
                                                    {% else %}
                                                        {{ detail.machine.nom }} {% if detail.machine.code %}({{ detail.machine.code }}){% endif %}
                                                    {% endif %}
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                                <div class="form-floating">
                                                    <input type="number" class="form-control item-quantity" value="{{ detail.quantite }}" min="1">
                                                    <label>Quantité</label>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                {% if bon.type == 'Livraison' %}
                                                    <div class="form-floating">
                                                        <input type="text" class="form-control item-fournisseur" value="{{ detail.fournisseur }}">
                                                        <label>Fournisseur</label>
                                                    </div>
                                                {% endif %}
                                            </div>
                                        </div>
                                    </div>
                                {% endfor %}
                            {% else %}
                                <div class="text-center py-5 text-muted" id="emptyItemsMessage">
                                    <i class="bi bi-inbox fs-2"></i>
                                    <p class="mt-2">Aucun article ou machine ajouté</p>
                                    <p class="small">Utilisez les boutons ci-dessus pour ajouter des éléments au bon</p>
                                </div>
                            {% endif %}
                        </div>
                        
                        <div class="d-flex justify-content-end mt-4">
                            <button type="submit" id="submitBon" class="btn btn-primary">
                                <i class="bi bi-save me-2"></i>Enregistrer les modifications
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Toast Container -->
    <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 5"></div>
    
    <!-- Modal pour ajouter un article -->
    <div class="modal fade" id="addArticleModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Ajouter un Article</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="articleSelect" class="form-label required">Sélectionner un article</label>
                        <select id="articleSelect" class="form-select">
                            <option value="" selected disabled>Chargement des articles...</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="articleQuantite" class="form-label required">Quantité</label>
                        <input type="number" id="articleQuantite" class="form-control" min="1" value="1">
                    </div>
                    <input type="hidden" id="articleUnite" value="Unité">
                    {% if bon.type == 'Livraison' %}
                        <div class="mb-3">
                            <label for="articleFournisseur" class="form-label">Fournisseur</label>
                            <input type="text" id="articleFournisseur" class="form-control">
                        </div>
                    {% endif %}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-primary" id="confirmAddArticle">Ajouter</button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Modal pour ajouter une machine -->
    <div class="modal fade" id="addMachineModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Ajouter une Machine</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="machineSelect" class="form-label required">Sélectionner une machine</label>
                        <select id="machineSelect" class="form-select">
                            <option value="" selected disabled>Chargement des machines...</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="machineQuantite" class="form-label required">Quantité</label>
                        <input type="number" id="machineQuantite" class="form-control" min="1" value="1">
                    </div>
                    {% if bon.type == 'Livraison' %}
                        <div class="mb-3">
                            <label for="machineFournisseur" class="form-label">Fournisseur</label>
                            <input type="text" id="machineFournisseur" class="form-control">
                        </div>
                    {% endif %}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-primary" id="confirmAddMachine">Ajouter</button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    flatpickr("#dateInput", {
        locale: "fr",
        dateFormat: "d/m/Y"
    });
    
    // Afficher/masquer le champ fournisseur en fonction du type de bon
    document.getElementById('typeSelect').addEventListener('change', function() {
        const fournisseurRow = document.getElementById('fournisseurRow');
        
        if (this.value === 'Livraison') {
            fournisseurRow.style.display = 'flex';
        } else {
            fournisseurRow.style.display = 'none';
        }
    });
    
    // Gestion des éléments existants
    const itemsContainer = document.getElementById('itemsContainer');
    const emptyMessage = document.getElementById('emptyItemsMessage');
    
    if (itemsContainer.querySelectorAll('.item-row').length > 0 && emptyMessage) {
        emptyMessage.style.display = 'none';
    }
    
    // Attacher les gestionnaires d'événements aux boutons de suppression existants
    document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', function() {
            this.closest('.item-row').remove();
            
            if (itemsContainer.querySelectorAll('.item-row').length === 0) {
                if (!emptyMessage) {
                    const newEmptyMessage = document.createElement('div');
                    newEmptyMessage.className = 'text-center py-5 text-muted';
                    newEmptyMessage.id = 'emptyItemsMessage';
                    newEmptyMessage.innerHTML = `
                        <i class="bi bi-inbox fs-2"></i>
                        <p class="mt-2">Aucun article ou machine ajouté</p>
                        <p class="small">Utilisez les boutons ci-dessus pour ajouter des éléments au bon</p>
                    `;
                    itemsContainer.appendChild(newEmptyMessage);
                } else {
                    emptyMessage.style.display = 'block';
                }
            }
        });
    });
    
    document.querySelectorAll('.item-quantity').forEach(input => {
        input.addEventListener('change', function() {
            this.closest('.item-row').setAttribute('data-quantity', this.value);
        });
    });
    
    document.querySelectorAll('.item-fournisseur').forEach(input => {
        input.addEventListener('change', function() {
            this.closest('.item-row').setAttribute('data-fournisseur', this.value);
        });
    });
    
    let articlesLoaded = false;
    document.getElementById('addArticleBtn').addEventListener('click', function() {
        const modal = new bootstrap.Modal(document.getElementById('addArticleModal'));
        
        if (!articlesLoaded) {
            fetch('/api/articles')
                .then(response => response.json())
                .then(data => {
                    const articleSelect = document.getElementById('articleSelect');
                    articleSelect.innerHTML = '<option value="" selected disabled>Choisir un article</option>';
                    
                    data.forEach(article => {
                        const option = document.createElement('option');
                        option.value = article.id;
                        option.textContent = `${article.nom} - ${article.reference}`;
                        option.setAttribute('data-unite', article.unite);
                        articleSelect.appendChild(option);
                    });
                    
                    articlesLoaded = true;
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    showToast('Erreur lors du chargement des articles', 'danger');
                });
        }
        
        modal.show();
    });
    
    let machinesLoaded = false;
    document.getElementById('addMachineBtn').addEventListener('click', function() {
        const modal = new bootstrap.Modal(document.getElementById('addMachineModal'));
        
        if (!machinesLoaded) {
            fetch('/api/machines')
                .then(response => response.json())
                .then(data => {
                    const machineSelect = document.getElementById('machineSelect');
                    machineSelect.innerHTML = '<option value="" selected disabled>Choisir une machine</option>';
                    
                    data.forEach(machine => {
                        const option = document.createElement('option');
                        option.value = machine.id;
                        option.textContent = `${machine.nom} - ${machine.code || 'Sans code'}`;
                        machineSelect.appendChild(option);
                    });
                    
                    machinesLoaded = true;
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    showToast('Erreur lors du chargement des machines', 'danger');
                });
        }
        
        modal.show();
    });
    
    document.getElementById('articleSelect').addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        const unite = selectedOption.getAttribute('data-unite');
        document.getElementById('articleUnite').value = unite || 'Unité';
    });
    
    document.getElementById('confirmAddArticle').addEventListener('click', function() {
        const articleSelect = document.getElementById('articleSelect');
        const articleQuantite = document.getElementById('articleQuantite');
        const articleUnite = document.getElementById('articleUnite');
        let articleFournisseur = null;
        
        if (document.getElementById('typeSelect').value === 'Livraison') {
            articleFournisseur = document.getElementById('articleFournisseur');
        }
        
        if (!articleSelect.value) {
            showToast('Veuillez sélectionner un article', 'danger');
            return;
        }
        
        if (!articleQuantite.value || articleQuantite.value < 1) {
            showToast('Veuillez entrer une quantité valide', 'danger');
            return;
        }
        
        const articleId = articleSelect.value;
        const articleName = articleSelect.options[articleSelect.selectedIndex].textContent;
        const fournisseur = articleFournisseur ? articleFournisseur.value || '' : '';
        const quantite = articleQuantite.value;
        const unite = articleUnite.value;
        
        addItemToList('article', articleId, articleName, quantite, unite, fournisseur);
        
        articleQuantite.value = 1;
        if (articleFournisseur) articleFournisseur.value = '';
        
        const modal = bootstrap.Modal.getInstance(document.getElementById('addArticleModal'));
        modal.hide();
    });
    
    // Ajouter une machine au bon
    document.getElementById('confirmAddMachine').addEventListener('click', function() {
        const machineSelect = document.getElementById('machineSelect');
        const machineQuantite = document.getElementById('machineQuantite');
        let machineFournisseur = null;
        
        if (document.getElementById('typeSelect').value === 'Livraison') {
            machineFournisseur = document.getElementById('machineFournisseur');
        }
        
        if (!machineSelect.value) {
            showToast('Veuillez sélectionner une machine', 'danger');
            return;
        }
        
        if (!machineQuantite.value || machineQuantite.value < 1) {
            showToast('Veuillez entrer une quantité valide', 'danger');
            return;
        }
        
        const machineId = machineSelect.value;
        const machineName = machineSelect.options[machineSelect.selectedIndex].textContent;
        const fournisseur = machineFournisseur ? machineFournisseur.value || '' : '';
        const quantite = machineQuantite.value;
        
        addItemToList('machine', machineId, machineName, quantite, 'Unité', fournisseur);
        
        // Réinitialiser et fermer le modal
        machineQuantite.value = 1;
        if (machineFournisseur) machineFournisseur.value = '';
        
        const modal = bootstrap.Modal.getInstance(document.getElementById('addMachineModal'));
        modal.hide();
    });
    
    // Ajouter un élément à la liste (article ou machine)
    function addItemToList(type, id, name, quantite, unite, fournisseur) {
        const itemsContainer = document.getElementById('itemsContainer');
        const emptyMessage = document.getElementById('emptyItemsMessage');
        
        // Masquer le message vide
        if (emptyMessage) {
            emptyMessage.style.display = 'none';
        }
        
        const badgeClass = type === 'article' ? 'badge-article' : 'badge-machine';
        
        // Créer la ligne d'élément
        const itemRow = document.createElement('div');
        itemRow.className = 'item-row';
        itemRow.setAttribute('data-type', type);
        itemRow.setAttribute('data-id', id);
        itemRow.setAttribute('data-quantity', quantite);
        itemRow.setAttribute('data-unite', unite);
        itemRow.setAttribute('data-fournisseur', fournisseur);
        
        // Contenu HTML pour l'élément
        let fournisseurField = '';
        if (document.getElementById('typeSelect').value === 'Livraison') {
            fournisseurField = `
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="text" class="form-control item-fournisseur" value="${fournisseur}">
                        <label>Fournisseur</label>
                    </div>
                </div>
            `;
        }
        
        itemRow.innerHTML = `
            <span class="badge ${badgeClass} mb-2">${type === 'article' ? 'Article' : 'Machine'}</span>
            <button type="button" class="remove-item btn btn-sm btn-outline-danger">
                <i class="bi bi-x-lg"></i>
            </button>
            <div class="row">
                <div class="col-md-5">
                    <div class="item-title">${name}</div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="number" class="form-control item-quantity" value="${quantite}" min="1">
                        <label>Quantité</label>
                    </div>
                </div>
                ${fournisseurField}
            </div>
        `;
        
        // Ajouter la ligne au conteneur
        itemsContainer.appendChild(itemRow);
        
        // Attacher le gestionnaire d'événement pour supprimer
        itemRow.querySelector('.remove-item').addEventListener('click', function() {
            itemRow.remove();
            
            // Afficher le message vide si la liste est vide
            if (itemsContainer.querySelectorAll('.item-row').length === 0) {
                if (emptyMessage) {
                    emptyMessage.style.display = 'block';
                } else {
                    const newEmptyMessage = document.createElement('div');
                    newEmptyMessage.className = 'text-center py-5 text-muted';
                    newEmptyMessage.id = 'emptyItemsMessage';
                    newEmptyMessage.innerHTML = `
                        <i class="bi bi-inbox fs-2"></i>
                        <p class="mt-2">Aucun article ou machine ajouté</p>
                        <p class="small">Utilisez les boutons ci-dessus pour ajouter des éléments au bon</p>
                    `;
                    itemsContainer.appendChild(newEmptyMessage);
                }
            }
        });
        
        // Mettre à jour la quantité et le fournisseur lorsqu'ils changent
        itemRow.querySelector('.item-quantity').addEventListener('change', function() {
            itemRow.setAttribute('data-quantity', this.value);
        });
        
        if (document.getElementById('typeSelect').value === 'Livraison') {
            itemRow.querySelector('.item-fournisseur').addEventListener('change', function() {
                itemRow.setAttribute('data-fournisseur', this.value);
            });
        }
    }
    
    // Soumettre le formulaire d'édition
    document.getElementById('editBonForm').addEventListener('submit', function(event) {
        event.preventDefault();
        
        const submitBtn = document.getElementById('submitBon');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i>Traitement en cours...';
        
        // Récupérer les données du formulaire
        const type = document.getElementById('typeSelect').value;
        const numero_serie = document.getElementById('numeroSerieInput').value;
        const date = document.getElementById('dateInput').value;
        const note = document.getElementById('noteInput').value;
        const fournisseur = document.getElementById('fournisseurInput') ? document.getElementById('fournisseurInput').value || '' : '';
        
        // Récupérer tous les articles et machines
        const items = document.querySelectorAll('.item-row');
        const articles = [];
        const machines = [];
        
        items.forEach(item => {
            const itemType = item.getAttribute('data-type');
            const itemId = item.getAttribute('data-id');
            const itemQuantity = item.getAttribute('data-quantity');
            const itemFournisseur = item.getAttribute('data-fournisseur') || '';
            const itemUnite = item.getAttribute('data-unite') || 'Unité';
            
            if (itemType === 'article') {
                articles.push({
                    id: itemId,
                    quantite: itemQuantity,
                    fournisseur: itemFournisseur,
                    unite: itemUnite
                });
            } else {
                machines.push({
                    id: itemId,
                    quantite: itemQuantity,
                    fournisseur: itemFournisseur,
                    unite: 'Unité'
                });
            }
        });
        
        // Préparer les données pour l'envoi
        const formData = {
            type: type,
            numero_serie: numero_serie,
            date: date,
            note: note,
            fournisseur: fournisseur,
            articles: articles,
            machines: machines
        };
        
        // Envoyer les données au serveur
        fetch('{{ path('app_bon_edit', {'id': bon.id}) }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(formData)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Erreur réseau: ' + response.status);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                showToast('Bon modifié avec succès', 'success');
                
                // Rediriger vers la page de détails après 1 seconde
                setTimeout(() => {
                    window.location.href = '{{ path('app_bon_show', {'id': bon.id}) }}';
                }, 1000);
            } else {
                showToast('Erreur: ' + data.message, 'danger');
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="bi bi-save me-2"></i>Enregistrer les modifications';
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            showToast('Erreur: ' + error.message, 'danger');
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="bi bi-save me-2"></i>Enregistrer les modifications';
        });
    });
    
    // Fonction pour afficher un toast
    function showToast(message, type = 'primary') {
        const toastContainer = document.getElementById('toastContainer');
        
        const toast = document.createElement('div');
        toast.className = 'toast show';
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        let bgColor = 'bg-primary';
        let icon = 'bi-info-circle';
        
        if (type === 'success') {
            bgColor = 'bg-success';
            icon = 'bi-check-circle';
        } else if (type === 'danger') {
            bgColor = 'bg-danger';
            icon = 'bi-exclamation-triangle';
        } else if (type === 'warning') {
            bgColor = 'bg-warning';
            icon = 'bi-exclamation-circle';
        }
        
        toast.innerHTML = `
            <div class="toast-header ${bgColor} text-white">
                <i class="bi ${icon} me-2"></i>
                <strong class="me-auto">${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        `;
        
        toastContainer.appendChild(toast);
        
        // Créer l'instance Toast Bootstrap
        const bsToast = new bootstrap.Toast(toast);
        
        // Supprimer le toast après qu'il soit masqué
        toast.addEventListener('hidden.bs.toast', function() {
            toast.remove();
        });
        
        // Masquer automatiquement après 3 secondes
        setTimeout(() => {
            bsToast.hide();
        }, 3000);
    }
});
</script>
{% endblock %}
