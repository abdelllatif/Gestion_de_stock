{% extends 'base.html.twig' %}

{% block title %}Gestion des Bons{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/dataTables.bootstrap5.min.css">
<style>
    .table th {
        font-weight: 600;
    }
    
    .status-badge {
        font-weight: 500;
        padding: 0.35rem 0.65rem;
    }
    
    .btn-filter.active {
        background-color: #3b82f6;
        color: white;
    }
    
    .badge-sortie {
        background-color: #ef4444;
        color: white;
    }
    
    .badge-entrée {
        background-color: #10b981;
        color: white;
    }
    
    .badge-transfert {
        background-color: #f59e0b;
        color: white;
    }
    
    .badge-article {
        background-color: #3b82f6;
        color: white;
    }
    
    .badge-machine {
        background-color: #8b5cf6;
        color: white;
    }
    
    .dataTables_wrapper .dataTables_filter input {
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
    }
    
    .dataTables_wrapper .dataTables_length select {
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
    }
    
    .dataTables_info {
        padding-top: 1rem !important;
    }
    
    table.dataTable {
        margin-top: 1rem !important;
        margin-bottom: 1rem !important;
    }
</style>
{% endblock %}

{% block body %}
<div class="container-fluid px-4 py-3">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Gestion des Bons</h1>
        <div>
            <a href="{{ path('app_bon_new') }}" class="btn btn-primary">
                <i class="bi bi-plus-circle me-2"></i>Nouveau Bon
            </a>
        </div>
    </div>
    
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-white py-3">
            <h5 class="card-title mb-0">Liste des Bons</h5>
        </div>
        <div class="card-body">
            <table id="bonsTable" class="table table-striped table-hover" style="width:100%">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Numéro</th>
                        <th>Type</th>
                        <th>Date</th>
                        <th>Chantier</th>
                        <th>Articles/Machines</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Les données seront chargées par DataTables -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal de confirmation de suppression -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Confirmation de Suppression</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Êtes-vous sûr de vouloir supprimer le bon <strong id="bonSerieToDelete"></strong> ?</p>
                <p class="mb-0 text-danger"><i class="bi bi-exclamation-triangle me-2"></i>Cette action est irréversible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Supprimer</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.13.7/js/dataTables.bootstrap5.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialisation de DataTables
    const table = $('#bonsTable').DataTable({
        processing: true,
        serverSide: true,
        ajax: {
            url: '{{ path('app_bon') }}',
            type: 'GET',
            error: function(xhr, error, thrown) {
                let errorMessage = 'Une erreur est survenue lors du chargement des données.';
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage += ' Détails: ' + xhr.responseJSON.message;
                }
                console.error('Erreur DataTables:', error, thrown);
                showToast(errorMessage, 'danger');
                // Afficher un message dans le tableau
                $('#bonsTable tbody').html('<tr><td colspan="7" class="text-center text-danger py-4"><i class="bi bi-exclamation-triangle me-2"></i>' + errorMessage + '</td></tr>');
            }
        },
        columns: [
            { data: 'id', visible: false },
            { data: 'numeroSerie' },
            { 
                data: 'type', 
                render: function(data, type, row) {
                    if (type === 'display') {
                        let badgeClass = '';
                        let icon = '';
                        
                        if (data === 'Sortie') {
                            badgeClass = 'badge-sortie';
                            icon = '<i class="bi bi-box-arrow-right me-1"></i>';
                        } else if (data === 'Entrée') {
                            badgeClass = 'badge-entrée';
                            icon = '<i class="bi bi-box-arrow-in-right me-1"></i>';
                        } else {
                            badgeClass = 'badge-transfert';
                            icon = '<i class="bi bi-arrow-left-right me-1"></i>';
                        }
                        
                        return `<span class="badge ${badgeClass}">${icon}${data}</span>`;
                    }
                    return data;
                }
            },
            { data: 'date' },
            { data: 'chantier' },
            { 
                data: 'details',
                render: function(data, type, row) {
                    if (type === 'display') {
                        return `<span class="badge bg-secondary" data-bs-toggle="tooltip" title="Articles et machines inclus dans ce bon">${data} éléments</span>`;
                    }
                    return data;
                }
            },
            { 
                data: 'actions',
                orderable: false,
                searchable: false
            }
        ],
        order: [[3, 'desc']], // Tri par date par défaut
        language: {
            url: '/js/fr-FR.json'
        },
        drawCallback: function() {
            // Réinitialiser les tooltips après chaque redraw
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Attacher les gestionnaires d'événements pour les boutons de suppression
            attachDeleteHandlers();
        }
    });
    
    // Gestionnaire pour le modal de suppression
    function attachDeleteHandlers() {
        const deleteButtons = document.querySelectorAll('.delete-bon-btn');
        const deleteConfirmModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
        const bonSerieToDelete = document.getElementById('bonSerieToDelete');
        const confirmDeleteBtn = document.getElementById('confirmDelete');
        
        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const bonId = this.getAttribute('data-id');
                const bonSerie = this.getAttribute('data-serie');
                
                bonSerieToDelete.textContent = bonSerie;
                confirmDeleteBtn.setAttribute('data-id', bonId);
                
                deleteConfirmModal.show();
            });
        });
    }
    
    // Gérer la confirmation de suppression
    const confirmDeleteBtn = document.getElementById('confirmDelete');
    confirmDeleteBtn.addEventListener('click', function() {
        const bonId = this.getAttribute('data-id');
        
        // Désactiver le bouton pendant la suppression
        confirmDeleteBtn.disabled = true;
        confirmDeleteBtn.innerHTML = '<i class="spinner-border spinner-border-sm me-1"></i> Traitement en cours...';
        
        // Appel API pour supprimer le bon
        fetch(`/bon/${bonId}/delete`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Erreur réseau: ' + response.status);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Afficher une notification de succès
                const toast = document.createElement('div');
                toast.className = 'position-fixed bottom-0 end-0 p-3';
                toast.style.zIndex = '5';
                toast.innerHTML = `
                    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header bg-success text-white">
                            <i class="bi bi-check-circle me-2"></i>
                            <strong class="me-auto">Succès</strong>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            Le bon a été supprimé avec succès.
                        </div>
                    </div>
                `;
                document.body.appendChild(toast);
                
                // Fermer le toast après 3 secondes
                setTimeout(() => {
                    const toastElement = toast.querySelector('.toast');
                    const bsToast = new bootstrap.Toast(toastElement);
                    bsToast.hide();
                }, 3000);
                
                // Fermer le modal et rafraîchir la table
                const modalElement = document.getElementById('deleteConfirmModal');
                const modal = bootstrap.Modal.getInstance(modalElement);
                modal.hide();
                
                // Recharger les données de la table
                $('#bonsTable').DataTable().ajax.reload();
            } else {
                alert('Erreur: ' + (data.message || 'Une erreur est survenue'));
                
                // Réactiver le bouton
                confirmDeleteBtn.disabled = false;
                confirmDeleteBtn.innerHTML = 'Supprimer';
            }
        })
        .catch(error => {
            console.error('Erreur:', error);
            alert('Erreur: ' + error.message);
            
            // Réactiver le bouton
            confirmDeleteBtn.disabled = false;
            confirmDeleteBtn.innerHTML = 'Supprimer';
        });
    });
    
    // Fonction pour afficher un toast
    function showToast(message, type = 'primary') {
        const toastContainer = document.createElement('div');
        toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
        toastContainer.style.zIndex = '5';
        
        const toast = document.createElement('div');
        toast.className = 'toast show';
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');
        
        let bgColor = 'bg-primary';
        let icon = 'bi-info-circle';
        
        if (type === 'success') {
            bgColor = 'bg-success';
            icon = 'bi-check-circle';
        } else if (type === 'danger') {
            bgColor = 'bg-danger';
            icon = 'bi-exclamation-triangle';
        } else if (type === 'warning') {
            bgColor = 'bg-warning';
            icon = 'bi-exclamation-circle';
        }
        
        toast.innerHTML = `
            <div class="toast-header ${bgColor} text-white">
                <i class="bi ${icon} me-2"></i>
                <strong class="me-auto">${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        `;
        
        toastContainer.appendChild(toast);
        document.body.appendChild(toastContainer);
        
        // Créer l'instance Toast Bootstrap
        const bsToast = new bootstrap.Toast(toast);
        
        // Supprimer le toast après qu'il soit masqué
        toast.addEventListener('hidden.bs.toast', function() {
            toastContainer.remove();
        });
        
        // Masquer automatiquement après 3 secondes
        setTimeout(() => {
            bsToast.hide();
        }, 3000);
    }
});
</script>
{% endblock %}
