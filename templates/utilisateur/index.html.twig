{% extends 'base.html.twig' %}

{% block title %}Utilisateurs{% endblock %}

{% block body %}
<link rel="stylesheet" href="https://cdn.datatables.net/2.0.7/css/dataTables.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/2.0.7/css/dataTables.bootstrap5.min.css">
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.datatables.net/2.0.7/js/dataTables.min.js"></script>
<script src="https://cdn.datatables.net/2.0.7/js/dataTables.bootstrap5.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<div class="container py-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 style="color: #232946; font-family: 'Segoe UI', sans-serif; font-weight: bold; letter-spacing: 1px;">Utilisateurs</h1>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal" style="font-weight: 500;">Créer utilisateur</button>
    </div>
    <div class="card shadow-sm p-4">
        <table id="utilisateursTable" class="table table-striped" style="width:100%">
            <thead>
                <tr>
                    <th>Prénom</th>
                    <th>Nom</th>
                    <th>Email</th>
                    <th>Numéro</th>
                    <th>Rôles</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for user in users %}
                    <tr data-user-id="{{ user.id }}">
                        <td>{{ user.prenom }}</td>
                        <td>{{ user.nom }}</td>
                        <td>{{ user.email }}</td>
                        <td>{{ user.tele }}</td>
                        <td>
                            {% if user.isAdmin %}
                                Admin
                            {% else %}
                                {% set roleNames = [] %}
                                {% for role in user.roleEntities is defined ? user.roleEntities : (user.getRoleEntities is defined ? user.getRoleEntities() : user.roles) %}
                                    {% set roleNames = roleNames|merge([role.nom|replace({'_': ' '})|capitalize]) %}
                                {% endfor %}
                                {{ roleNames|join(', ') }}
                            {% endif %}
                        </td>
                        <td>
                            <a href="#" class="btn btn-sm btn-outline-dark me-1" title="Afficher"><i class="bi bi-eye"></i></a>
                            <a href="{{ path('app_utilisateur_edit', {'id': user.id}) }}" class="btn btn-sm btn-outline-primary me-1 edit-user" title="Modifier" data-bs-toggle="modal" data-bs-target="#editUserModal" data-id="{{ user.id }}"><i class="bi bi-pencil"></i></a>
                            <a href="#" class="btn btn-sm btn-outline-danger delete-user" title="Supprimer" data-id="{{ user.id }}"><i class="bi bi-trash"></i></a>
                        </td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="6" class="text-center">Aucun utilisateur pour l'instant</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">Créer un utilisateur</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addUserForm">
                    <input type="hidden" id="add_csrf_token" name="_token" value="{{ csrf_token('add_user') }}">
                    <div class="row g-4 mb-3">
                        <div class="col-md-6">
                            <label for="add_username" class="form-label fw-bold">Nom d'utilisateur</label>
                            <input type="text" class="form-control" id="add_username" name="username" required maxlength="180">
                            <div id="add_username_error" class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6">
                            <label for="add_prenom" class="form-label fw-bold">Prénom</label>
                            <input type="text" class="form-control" id="add_prenom" name="prenom" required maxlength="255">
                        </div>
                    </div>
                    <div class="row g-4 mb-3">
                        <div class="col-md-6">
                            <label for="add_nom" class="form-label fw-bold">Nom</label>
                            <input type="text" class="form-control" id="add_nom" name="nom" required maxlength="255">
                        </div>
                        <div class="col-md-6">
                            <label for="add_email" class="form-label fw-bold">Email</label>
                            <input type="email" class="form-control" id="add_email" name="email" required maxlength="255">
                            <div id="add_email_error" class="invalid-feedback"></div>
                        </div>
                    </div>
                    <div class="row g-4 mb-3">
                        <div class="col-md-6">
                            <label for="add_numero" class="form-label fw-bold">Numéro</label>
                            <input type="text" class="form-control" id="add_numero" name="numero" required maxlength="255">
                        </div>
                        <div class="col-md-6">
                            <label for="add_motdepasse" class="form-label fw-bold">Mot de passe</label>
                            <input type="password" class="form-control" id="add_motdepasse" name="motdepasse" required>
                        </div>
                    </div>
                    <div class="row g-4 mb-3">
                        <div class="col-md-6">
                            <label for="add_confirmermotdepasse" class="form-label fw-bold">Confirmer le mot de passe</label>
                            <input type="password" class="form-control" id="add_confirmermotdepasse" name="confirmermotdepasse" required>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold mb-2">Type d'utilisateur</label>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="add_is_admin" id="add_adminRadio" value="1" checked>
                            <label class="form-check-label" for="add_adminRadio">Admin</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="add_is_admin" id="add_userRadio" value="0">
                            <label class="form-check-label" for="add_userRadio">Utilisateur avec permissions</label>
                        </div>
                    </div>
                    <div id="add_permissionsSection" class="mb-4" style="display: none;">
                        <label class="form-label fw-bold mb-2">Permissions</label>
                        <div class="container-fluid">
                            <div class="row">
                                {% set groupCount = 0 %}
                                {% for group, roles in groupedRoles %}
                                    {% if groupCount % 4 == 0 and groupCount > 0 %}</div><div class="row">{% endif %}
                                    <div class="col-md-3 mb-3" style="min-width: 260px;">
                                        <div class="border rounded p-3 h-100">
                                            <div class="d-flex align-items-center mb-2 group-header" style="cursor:pointer;" data-bs-toggle="collapse" data-bs-target="#add-roles-{{ loop.index }}" aria-expanded="false" aria-controls="add-roles-{{ loop.index }}">
                                                <input class="form-check-input group-checkbox me-2" type="checkbox" id="add-group-{{ loop.index }}" data-group="add-group-{{ loop.index }}">
                                                <label class="form-check-label fw-bold me-2" for="add-group-{{ loop.index }}" style="font-size: 1.1rem;">{{ group|capitalize }}</label>
                                                <span class="ms-auto chevron" style="transition: transform 0.2s;">›</span>
                                            </div>
                                            <div class="collapse" id="add-roles-{{ loop.index }}">
                                                <div>
                                                    {% if roles|length > 0 %}
                                                        {% for role in roles %}
                                                            <div class="form-check ms-3">
                                                                <input class="form-check-input add-group-{{ loop.parent.loop.index }}-checkbox role-checkbox" type="checkbox" name="roles[]" value="{{ role.id }}" id="add-role-{{ role.id }}">
                                                                <label class="form-check-label" for="add-role-{{ role.id }}">{{ role.nom|replace({'_': ' '})|capitalize }}</label>
                                                            </div>
                                                        {% endfor %}
                                                    {% else %}
                                                        <span class="text-muted">Aucun rôle</span>
                                                    {% endif %}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    {% set groupCount = groupCount + 1 %}
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg" id="addUserSubmit">Ajouter</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Modifier un utilisateur</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <input type="hidden" id="edit_csrf_token" name="_token" value="{{ csrf_token('edit_user') }}">
                    <input type="hidden" name="id" id="edit_id">
                    <div class="row g-4 mb-3">
                        <div class="col-md-6">
                            <label for="edit_username" class="form-label fw-bold">Nom d'utilisateur</label>
                            <input type="text" class="form-control" id="edit_username" name="username" required maxlength="180">
                            <div id="edit_username_error" class="invalid-feedback"></div>
                        </div>
                        <div class="col-md-6">
                            <label for="edit_prenom" class="form-label fw-bold">Prénom</label>
                            <input type="text" class="form-control" id="edit_prenom" name="prenom" required maxlength="255">
                        </div>
                    </div>
                    <div class="row g-4 mb-3">
                        <div class="col-md-6">
                            <label for="edit_nom" class="form-label fw-bold">Nom</label>
                            <input type="text" class="form-control" id="edit_nom" name="nom" required maxlength="255">
                        </div>
                        <div class="col-md-6">
                            <label for="edit_email" class="form-label fw-bold">Email</label>
                            <input type="email" class="form-control" id="edit_email" name="email" required maxlength="255">
                            <div id="edit_email_error" class="invalid-feedback"></div>
                        </div>
                    </div>
                    <div class="row g-4 mb-3">
                        <div class="col-md-6">
                            <label for="edit_numero" class="form-label fw-bold">Numéro</label>
                            <input type="text" class="form-control" id="edit_numero" name="numero" required maxlength="255">
                        </div>
                        <div class="col-md-6">
                            <label for="edit_motdepasse" class="form-label fw-bold">Mot de passe</label>
                            <input type="password" class="form-control" id="edit_motdepasse" name="motdepasse" placeholder="Laisser vide pour ne pas modifier">
                        </div>
                    </div>
                    <div class="row g-4 mb-3">
                        <div class="col-md-6">
                            <label for="edit_confirmermotdepasse" class="form-label fw-bold">Confirmer le mot de passe</label>
                            <input type="password" class="form-control" id="edit_confirmermotdepasse" name="confirmermotdepasse" placeholder="Laisser vide pour ne pas modifier">
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold mb-2">Type d'utilisateur</label>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="edit_is_admin" id="edit_adminRadio" value="1" checked>
                            <label class="form-check-label" for="edit_adminRadio">Admin</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="edit_is_admin" id="edit_userRadio" value="0">
                            <label class="form-check-label" for="edit_userRadio">Utilisateur avec permissions</label>
                        </div>
                    </div>
                    <div id="edit_permissionsSection" class="mb-4" style="display: none;">
                        <label class="form-label fw-bold mb-2">Permissions</label>
                        <div class="container-fluid">
                            <div class="row">
                                {% set groupCount = 0 %}
                                {% for group, roles in groupedRoles %}
                                    {% if groupCount % 4 == 0 and groupCount > 0 %}</div><div class="row">{% endif %}
                                    <div class="col-md-3 mb-3" style="min-width: 260px;">
                                        <div class="border rounded p-3 h-100">
                                            <div class="d-flex align-items-center mb-2 group-header" style="cursor:pointer;" data-bs-toggle="collapse" data-bs-target="#edit-roles-{{ loop.index }}" aria-expanded="false" aria-controls="edit-roles-{{ loop.index }}">
                                                <input class="form-check-input group-checkbox me-2" type="checkbox" id="edit-group-{{ loop.index }}" data-group="edit-group-{{ loop.index }}">
                                                <label class="form-check-label fw-bold me-2" for="edit-group-{{ loop.index }}" style="font-size: 1.1rem;">{{ group|capitalize }}</label>
                                                <span class="ms-auto chevron" style="transition: transform 0.2s;">›</span>
                                            </div>
                                            <div class="collapse" id="edit-roles-{{ loop.index }}">
                                                <div>
                                                    {% if roles|length > 0 %}
                                                        {% for role in roles %}
                                                            <div class="form-check ms-3">
                                                                <input class="form-check-input edit-group-{{ loop.parent.loop.index }}-checkbox role-checkbox" type="checkbox" name="roles[]" value="{{ role.id }}" id="edit-role-{{ role.id }}">
                                                                <label class="form-check-label" for="edit-role-{{ role.id }}">{{ role.nom|replace({'_': ' '})|capitalize }}</label>
                                                            </div>
                                                        {% endfor %}
                                                    {% else %}
                                                        <span class="text-muted">Aucun rôle</span>
                                                    {% endif %}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    {% set groupCount = groupCount + 1 %}
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary btn-lg" id="editUserSubmit">Enregistrer</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="{{ asset('js/components/alert.js') }}"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
$(document).ready(function() {
    const table = $('#utilisateursTable').DataTable({
        language: {
            decimal: ",",
            thousands: " ",
            search: "Rechercher :",
            lengthMenu: "Afficher _MENU_ entrées",
            info: "Affichage de _START_ à _END_ sur _TOTAL_ entrées",
            infoEmpty: "Affichage de 0 à 0 sur 0 entrées",
            infoFiltered: "(filtré de _MAX_ entrées totales)",
            loadingRecords: "Chargement...",
            zeroRecords: "Aucun enregistrement correspondant trouvé",
            emptyTable: "Aucune donnée disponible dans le tableau",
            paginate: {
                first: '<i class="bi bi-chevron-bar-left"></i>',
                previous: '<i class="bi bi-chevron-left"></i>',
                next: '<i class="bi bi-chevron-right"></i>',
                last: '<i class="bi bi-chevron-bar-right"></i>'
            }
        }
    });

    $('#add_adminRadio, #add_userRadio').on('change', function() {
        $('#add_permissionsSection').toggle(!$('#add_adminRadio').is(':checked'));
    });
    $('#edit_adminRadio, #edit_userRadio').on('change', function() {
        $('#edit_permissionsSection').toggle(!$('#edit_adminRadio').is(':checked'));
    });
    $('#add_adminRadio, #edit_adminRadio, #add_userRadio, #edit_userRadio').trigger('change');

    document.querySelectorAll('.collapse').forEach(el => bootstrap.Collapse.getOrCreateInstance(el, { toggle: false }).hide());
    document.querySelectorAll('.group-header').forEach(header => {
        let chevron = header.querySelector('.chevron');
        let collapseEl = document.querySelector(header.getAttribute('data-bs-target'));
        collapseEl.addEventListener('show.bs.collapse', () => chevron.style.transform = 'rotate(90deg)');
        collapseEl.addEventListener('hide.bs.collapse', () => chevron.style.transform = 'rotate(0deg)');
        header.querySelectorAll('label, .chevron').forEach(el => el.addEventListener('click', e => { e.stopPropagation(); header.click(); }));
    });
    document.querySelectorAll('.group-checkbox').forEach(cb => {
        cb.addEventListener('change', function(e) {
            e.stopPropagation();
            let groupClass = this.getAttribute('data-group') + '-checkbox';
            let checkboxes = document.querySelectorAll('.' + groupClass);
            let collapseId = '#' + (this.id.startsWith('add-') ? 'add-roles-' : 'edit-roles-') + this.id.split('-')[2];
            checkboxes.forEach(c => c.checked = this.checked);
            bootstrap.Collapse.getOrCreateInstance(document.querySelector(collapseId))[this.checked ? 'show' : 'hide']();
        });
    });
    document.querySelectorAll('.role-checkbox').forEach(cb => {
        cb.addEventListener('change', function() {
            Array.from(this.classList).filter(c => c.endsWith('-checkbox')).forEach(groupClass => {
                let groupCheckbox = document.querySelector('.group-checkbox[data-group="' + groupClass.replace('-checkbox','') + '"]');
                let checkboxes = document.querySelectorAll('.' + groupClass);
                groupCheckbox.checked = Array.from(checkboxes).every(c => c.checked);
            });
        });
    });

    $('#add_username').on('blur', function() {
        $.ajax({
            url: '{{ path('app_verify_username') }}',
            method: 'POST',
            data: { username: $(this).val(), _token: $('#add_csrf_token').val() },
            success: function(response) {
                if (response) {
                    $('#add_username').addClass('is-invalid');
                    $('#add_username_error').text('Ce nom d\'utilisateur existe déjà.');
                } else {
                    $('#add_username').removeClass('is-invalid');
                    $('#add_username_error').text('');
                }
            },
            error: function(xhr) {
                $('#add_username').addClass('is-invalid');
                $('#add_username_error').text('Erreur lors de la vérification: ' + xhr.responseText);
                console.log('Verification Error:', xhr.responseText);
            }
        });
    });

    $('#add_email').on('blur', function() {
        $.ajax({
            url: '{{ path('app_verify_email') }}',
            method: 'POST',
            data: { email: $(this).val(), _token: $('#add_csrf_token').val() },
            success: function(response) {
                if (response) {
                    $('#add_email').addClass('is-invalid');
                    $('#add_email_error').text('Cet email existe déjà.');
                } else {
                    $('#add_email').removeClass('is-invalid');
                    $('#add_email_error').text('');
                }
            },
            error: function(xhr) {
                $('#add_email').addClass('is-invalid');
                $('#add_email_error').text('Erreur lors de la vérification: ' + xhr.responseText);
                console.log('Verification Error:', xhr.responseText);
            }
        });
    });

    $('#edit_username').on('blur', function() {
        $.ajax({
            url: '{{ path('app_verify_username') }}',
            method: 'POST',
            data: { 
                username: $(this).val(),
                exclude: $('#edit_id').val(),
                _token: $('#edit_csrf_token').val()
            },
            success: function(response) {
                if (response) {
                    $('#edit_username').addClass('is-invalid');
                    $('#edit_username_error').text('Ce nom d\'utilisateur existe déjà.');
                } else {
                    $('#edit_username').removeClass('is-invalid');
                    $('#edit_username_error').text('');
                }
            },
            error: function(xhr) {
                $('#edit_username').addClass('is-invalid');
                $('#edit_username_error').text('Erreur lors de la vérification: ' + xhr.responseText);
                console.log('Verification Error:', xhr.responseText);
            }
        });
    });

    $('#edit_email').on('blur', function() {
        $.ajax({
            url: '{{ path('app_verify_email') }}',
            method: 'POST',
            data: { 
                email: $(this).val(),
                exclude: $('#edit_id').val(),
                _token: $('#edit_csrf_token').val()
            },
            success: function(response) {
                if (response) {
                    $('#edit_email').addClass('is-invalid');
                    $('#edit_email_error').text('Cet email existe déjà.');
                } else {
                    $('#edit_email').removeClass('is-invalid');
                    $('#edit_email_error').text('');
                }
            },
            error: function(xhr) {
                $('#edit_email').addClass('is-invalid');
                $('#edit_email_error').text('Erreur lors de la vérification: ' + xhr.responseText);
                console.log('Verification Error:', xhr.responseText);
            }
        });
    });

    $('#addUserForm').on('submit', function(e) {
        e.preventDefault();
        const $form = $(this);
        const password = $('#add_motdepasse').val();
        const confirmPassword = $('#add_confirmermotdepasse').val();
        if (password !== confirmPassword) {
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: 'Les mots de passe ne correspondent pas.'
            });
            return;
        }
        if (!$.trim($('#add_email').val()) || !$('#add_email').val().includes('@')) {
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: 'Veuillez entrer un email valide.'
            });
            return;
        }
        const data = $form.serializeArray();
        let roles = [];
        $form.find('input[name="roles[]"]:checked').each(function() {
            roles.push($(this).val());
        });
        // Always send roles as an array, even if only one is selected
        for (let i = 0; i < roles.length; i++) {
            data.push({ name: 'roles[]', value: roles[i] });
        }
        data.push({ name: '_token', value: $('#add_csrf_token').val() });
        const $btn = $('#addUserSubmit');
        $btn.prop('disabled', true).text('Chargement...');
        $.ajax({
            url: '{{ path('app_utilisateur_new') }}',
            method: 'POST',
            data: $.param(data),
            success: function(response) {
                Swal.fire({
                    icon: 'success',
                    title: 'Succès',
                    text: response.message
                });
                $form[0].reset();
                $('#addUserModal').modal('hide');
                window.location.reload();
            },
            error: function(xhr) {
                console.log('AJAX Error:', {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    responseText: xhr.responseText,
                    responseJSON: xhr.responseJSON
                });
                let response = xhr.responseJSON || {};
                Swal.fire({
                    icon: 'error',
                    title: 'Erreur',
                    text: response.message || 'Une erreur est survenue: ' + xhr.responseText
                });
            },
            complete: function() {
                $btn.prop('disabled', false).text('Ajouter');
            }
        });
    });

    $('#editUserForm').on('submit', function(e) {
        e.preventDefault();
        const $form = $(this);
        const password = $('#edit_motdepasse').val();
        const confirmPassword = $('#edit_confirmermotdepasse').val();
        if (password && password !== confirmPassword) {
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: 'Les mots de passe ne correspondent pas.'
            });
            return;
        }
        if (!$.trim($('#edit_email').val()) || !$('#edit_email').val().includes('@')) {
            Swal.fire({
                icon: 'error',
                title: 'Erreur',
                text: 'Veuillez entrer un email valide.'
            });
            return;
        }
        const data = $form.serializeArray();
        let roles = [];
        $form.find('input[name="roles[]"]:checked').each(function() {
            roles.push($(this).val());
        });
        // Always send roles as an array, even if only one is selected
        for (let i = 0; i < roles.length; i++) {
            data.push({ name: 'roles[]', value: roles[i] });
        }
        data.push({ name: '_token', value: $('#edit_csrf_token').val() });
        const $btn = $('#editUserSubmit');
        $btn.prop('disabled', true).text('Chargement...');
        $.ajax({
            url: '{{ path('app_utilisateur_edit', {'id': '__ID__'}) }}'.replace('__ID__', $('#edit_id').val()),
            method: 'POST',
            data: $.param(data),
            success: function(response) {
                Swal.fire({
                    icon: 'success',
                    title: 'Succès',
                    text: response.message
                });
                $form[0].reset();
                $('#editUserModal').modal('hide');
                window.location.reload();
            },
            error: function(xhr) {
                console.log('AJAX Error:', {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    responseText: xhr.responseText,
                    responseJSON: xhr.responseJSON
                });
                let response = xhr.responseJSON || {};
                Swal.fire({
                    icon: 'error',
                    title: 'Erreur',
                    text: response.message || 'Une erreur est survenue: ' + xhr.responseText
                });
            },
            complete: function() {
                $btn.prop('disabled', false).text('Enregistrer');
            }
        });
    });

    document.querySelectorAll('#addUserModal .btn-close').forEach(btn => btn.addEventListener('click', () => {
        $('#addUserForm')[0].reset();
        $('#add_adminRadio, #add_userRadio').trigger('change');
        $('#add_username_error, #add_email_error').text('');
        $('#add_username, #add_email').removeClass('is-invalid');
    }));

    document.querySelectorAll('#editUserModal .btn-close').forEach(btn => btn.addEventListener('click', () => {
        $('#editUserForm')[0].reset();
        $('#edit_adminRadio, #edit_userRadio').trigger('change');
        $('#edit_username_error, #edit_email_error').text('');
        $('#edit_username, #edit_email').removeClass('is-invalid');
    }));

    document.querySelectorAll('.edit-user').forEach(btn => btn.addEventListener('click', function(e) {
        e.preventDefault();
        const userId = this.getAttribute('data-id');
        $.ajax({
            url: '{{ path('app_user_api', {'id': '__ID__'}) }}'.replace('__ID__', userId),
            method: 'GET',
            success: function(user) {
                $('#edit_id').val(user.id);
                $('#edit_username').val(user.username);
                $('#edit_prenom').val(user.prenom);
                $('#edit_nom').val(user.nom);
                $('#edit_email').val(user.email);
                $('#edit_numero').val(user.tele);
                $('#edit_' + (user.isAdmin ? 'adminRadio' : 'userRadio')).prop('checked', true);
                $('#edit_adminRadio, #edit_userRadio').trigger('change');
                // Uncheck all roles first
                $('#edit_permissionsSection input[name="roles[]"]').prop('checked', false);
                // Check only the user's roles
                user.roles.forEach(roleId => {
                    $('#edit_permissionsSection input[value="' + roleId + '"]').prop('checked', true);
                });
                // Update group checkboxes to reflect the state of their children
                document.querySelectorAll('.group-checkbox').forEach(groupCheckbox => {
                    const groupClass = groupCheckbox.getAttribute('data-group') + '-checkbox';
                    const checkboxes = document.querySelectorAll('.' + groupClass);
                    groupCheckbox.checked = Array.from(checkboxes).length > 0 && Array.from(checkboxes).every(c => c.checked);
                });
                $('#edit_username_error, #edit_email_error').text('');
                $('#edit_username, #edit_email').removeClass('is-invalid');
            },
            error: function(xhr) {
                let response = xhr.responseJSON || {};
                Swal.fire({
                    icon: 'error',
                    title: 'Erreur',
                    text: response.message || 'Impossible de charger les données de l\'utilisateur: ' + xhr.responseText
                });
                console.log('API Error:', xhr.responseText);
            }
        });
    }));
});
</script>
{% endblock %}